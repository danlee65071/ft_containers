Index: srcs/iterator.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   iterator.cpp                                       :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: hcharlsi <marvin@42.fr>                    +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2021/10/10 22:06:31 by hcharlsi          #+#    #+#             */\n/*   Updated: 2021/10/11 21:16:17 by hcharlsi         ###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n\n#include \"../includes/iterator.hpp\"\n\nnamespace ft\n{\n//\tConstructors\n\ttemplate<class Iterator>\n\tft::reverse_iterator<Iterator>::reverse_iterator<class Iterator>()\n\t{\n\t\tthis->current = 0;\n\t}\n\n\ttemplate<class Iterator>\n\tft::reverse_iterator<Iterator>::reverse_iterator<class Iterator>(\n\t\t\titerator_type x)\n\t{\n\t\tthis->current = x;\n\t}\n\n\ttemplate<class Iterator, class U>\n\tft::reverse_iterator<Iterator>::reverse_iterator<class Iterator>(\n\t\t\tconst reverse_iterator<U> &other)\n\t{\n\t\tthis->current = other.base();\n\t}\n\n//\tMember functions\n//\toperator=\n\ttemplate<class Iterator, class U>\n\treverse_iterator<Iterator>& ft::reverse_iterator<Iterator>::operator=\n\t        (const reverse_iterator<U>& other)\n\t{\n\t\tif (this == other)\n\t\t\treturn *this;\n\t\tthis->current = other.base();\n\t\treturn *this;\n\t}\n\n//\tbase()\n\ttemplate<class Iterator>\n\titerator_type ft::reverse_iterator<Iterator>::base() const\n\t{\n\t\treturn this->current;\n\t}\n\n//\toperator *\n\ttemplate<class Iterator>\n\treference ft::reverse_iterator<Iterator>::operator*() const\n\t{\n\t\tIterator tmp = this->current;\n\n\t\treturn *--tmp;\n\t}\n//\toperator ->\n\ttemplate<class Iterator>\n\tpointer ft::reverse_iterator<Iterator>::operator->() const\n\t{\n\t\treturn &(operator*());\n\t}\n//\toperator []\n\ttemplate<class Iterator>\n\treference\n\t\tft::reverse_iterator<Iterator>::operator[](difference_type n) const\n\t{\n\t\t\treturn base()[-n-1];\n\t}\n//\toperator ++\n\ttemplate<class Iterator>\n\treverse_iterator<Iterator> &ft::reverse_iterator<Iterator>::operator++()\n\t{\n\t\t--(this->current);\n\t\treturn *this;\n\t}\n//\toperator ++(int)\n\ttemplate<class Iterator>\n\treverse_iterator <Iterator> ft::reverse_iterator<Iterator>::operator++(int)\n\t{\n\t\treverse_iterator tmp = *this;\n\n\t\t--(this->current);\n\t\treturn tmp;\n\t}\n//\toperator --\n\ttemplate<class Iterator>\n\treverse_iterator<Iterator> &ft::reverse_iterator<Iterator>::operator--()\n\t{\n\t\t++(this->current);\n\t\treturn *this;\n\t}\n//\toperator --(int)\n\ttemplate<class Iterator>\n\treverse_iterator<Iterator> ft::reverse_iterator<Iterator>::operator--(int)\n\t{\n\t\treverse_iterator tmp = *this;\n\n\t\t++(this->current);\n\t\treturn tmp;\n\t}\n//\toperator +\n\ttemplate<class Iterator>\n\treverse_iterator<Iterator>\n\t\tft::reverse_iterator<Iterator>::operator+(difference_type n) const\n\t{\n\t\treverse_iterator tmp = *this;\n\n\t\ttmp.current = n;\n\t\treturn *tmp;\n\t}\n//\toperator -\n\ttemplate<class Iterator>\n\treverse_iterator <Iterator>\n\t\tft::reverse_iterator<Iterator>::operator-(difference_type n) const\n\t{\n\t\treverse_iterator tmp = *this;\n\n\t\ttmp.current += n;\n\t\treturn *tmp;\n\t}\n\n//\toperator +=\n\ttemplate<class Iterator>\n\treverse_iterator<Iterator>\n\t\tft::reverse_iterator<Iterator>::operator+=(difference_type n) const\n\t{\n\t\tthis->current -= n;\n\t\treturn *this;\n\t}\n\n//\toperator -=\n\ttemplate<class Iterator>\n\treverse_iterator<Iterator>\n\t\tft::reverse_iterator<Iterator>::operator-=(difference_type n) const\n\t{\n\t\tthis->current += n;\n\t\treturn *this;\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/srcs/iterator.cpp b/srcs/iterator.cpp
--- a/srcs/iterator.cpp	(revision 08f94c16957fff1ab1fffcfb261156d9327e3332)
+++ b/srcs/iterator.cpp	(date 1633983418972)
@@ -6,7 +6,7 @@
 /*   By: hcharlsi <marvin@42.fr>                    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2021/10/10 22:06:31 by hcharlsi          #+#    #+#             */
-/*   Updated: 2021/10/11 21:16:17 by hcharlsi         ###   ########.fr       */
+/*   Updated: 2021/10/11 23:16:32 by hcharlsi         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,7 +14,6 @@
 
 namespace ft
 {
-//	Constructors
 	template<class Iterator>
 	ft::reverse_iterator<Iterator>::reverse_iterator<class Iterator>()
 	{
@@ -34,115 +33,4 @@
 	{
 		this->current = other.base();
 	}
-
-//	Member functions
-//	operator=
-	template<class Iterator, class U>
-	reverse_iterator<Iterator>& ft::reverse_iterator<Iterator>::operator=
-	        (const reverse_iterator<U>& other)
-	{
-		if (this == other)
-			return *this;
-		this->current = other.base();
-		return *this;
-	}
-
-//	base()
-	template<class Iterator>
-	iterator_type ft::reverse_iterator<Iterator>::base() const
-	{
-		return this->current;
-	}
-
-//	operator *
-	template<class Iterator>
-	reference ft::reverse_iterator<Iterator>::operator*() const
-	{
-		Iterator tmp = this->current;
-
-		return *--tmp;
-	}
-//	operator ->
-	template<class Iterator>
-	pointer ft::reverse_iterator<Iterator>::operator->() const
-	{
-		return &(operator*());
-	}
-//	operator []
-	template<class Iterator>
-	reference
-		ft::reverse_iterator<Iterator>::operator[](difference_type n) const
-	{
-			return base()[-n-1];
-	}
-//	operator ++
-	template<class Iterator>
-	reverse_iterator<Iterator> &ft::reverse_iterator<Iterator>::operator++()
-	{
-		--(this->current);
-		return *this;
-	}
-//	operator ++(int)
-	template<class Iterator>
-	reverse_iterator <Iterator> ft::reverse_iterator<Iterator>::operator++(int)
-	{
-		reverse_iterator tmp = *this;
-
-		--(this->current);
-		return tmp;
-	}
-//	operator --
-	template<class Iterator>
-	reverse_iterator<Iterator> &ft::reverse_iterator<Iterator>::operator--()
-	{
-		++(this->current);
-		return *this;
-	}
-//	operator --(int)
-	template<class Iterator>
-	reverse_iterator<Iterator> ft::reverse_iterator<Iterator>::operator--(int)
-	{
-		reverse_iterator tmp = *this;
-
-		++(this->current);
-		return tmp;
-	}
-//	operator +
-	template<class Iterator>
-	reverse_iterator<Iterator>
-		ft::reverse_iterator<Iterator>::operator+(difference_type n) const
-	{
-		reverse_iterator tmp = *this;
-
-		tmp.current = n;
-		return *tmp;
-	}
-//	operator -
-	template<class Iterator>
-	reverse_iterator <Iterator>
-		ft::reverse_iterator<Iterator>::operator-(difference_type n) const
-	{
-		reverse_iterator tmp = *this;
-
-		tmp.current += n;
-		return *tmp;
-	}
-
-//	operator +=
-	template<class Iterator>
-	reverse_iterator<Iterator>
-		ft::reverse_iterator<Iterator>::operator+=(difference_type n) const
-	{
-		this->current -= n;
-		return *this;
-	}
-
-//	operator -=
-	template<class Iterator>
-	reverse_iterator<Iterator>
-		ft::reverse_iterator<Iterator>::operator-=(difference_type n) const
-	{
-		this->current += n;
-		return *this;
-	}
 }
Index: srcs/main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   main.cpp                                           :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: hcharlsi <marvin@42.fr>                    +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2021/10/10 21:09:40 by hcharlsi          #+#    #+#             */\n/*   Updated: 2021/10/10 21:09:42 by hcharlsi         ###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n\n#include <iostream>\n#include <string>\n#include <deque>\n#if 1 //CREATE A REAL STL EXAMPLE\n\t#include <map>\n\t#include <stack>\n\t#include <vector>\n\tnamespace ft = std;\n#else\n\t#include <map.hpp>\n\t#include <stack.hpp>\n\t#include <vector.hpp>\n#endif\n\n#include <stdlib.h>\n\n#define MAX_RAM 4294967296\n#define BUFFER_SIZE 4096\nstruct Buffer\n{\n\tint idx;\n\tchar buff[BUFFER_SIZE];\n};\n\n\n#define COUNT (MAX_RAM / (int)sizeof(Buffer))\n\ntemplate<typename T>\nclass MutantStack : public ft::stack<T>\n{\npublic:\n\tMutantStack() {}\n\tMutantStack(const MutantStack<T>& src) { *this = src; }\n\tMutantStack<T>& operator=(const MutantStack<T>& rhs) \n\t{\n\t\tthis->c = rhs.c;\n\t\treturn *this;\n\t}\n\t~MutantStack() {}\n\n\ttypedef typename ft::stack<T>::container_type::iterator iterator;\n\n\titerator begin() { return this->c.begin(); }\n\titerator end() { return this->c.end(); }\n};\n\nint main(int argc, char** argv) {\n\tif (argc != 2)\n\t{\n\t\tstd::cerr << \"Usage: ./test seed\" << std::endl;\n\t\tstd::cerr << \"Provide a seed please\" << std::endl;\n\t\tstd::cerr << \"Count value:\" << COUNT << std::endl;\n\t\treturn 1;\n\t}\n\tconst int seed = atoi(argv[1]);\n\tsrand(seed);\n\n\tft::vector<std::string> vector_str;\n\tft::vector<int> vector_int;\n\tft::stack<int> stack_int;\n\tft::vector<Buffer> vector_buffer;\n\tft::stack<Buffer, std::deque<int> > stack_deq_buffer;\n\tft::map<int, int> map_int;\n\n\tfor (int i = 0; i < COUNT; i++)\n\t{\n\t\tvector_buffer.push_back(Buffer());\n\t}\n\n\tfor (int i = 0; i < COUNT; i++)\n\t{\n\t\tconst int idx = rand() % COUNT;\n\t\tvector_buffer[idx].idx = 5;\n\t}\n\tft::vector<Buffer>().swap(vector_buffer);\n\n\ttry\n\t{\n\t\tfor (int i = 0; i < COUNT; i++)\n\t\t{\n\t\t\tconst int idx = rand() % COUNT;\n\t\t\tvector_buffer.at(idx);\n\t\t\tstd::cerr << \"Error: THIS VECTOR SHOULD BE EMPTY!!\" <<std::endl;\n\t\t}\n\t}\n\tcatch(const std::exception& e)\n\t{\n\t\t//NORMAL ! :P\n\t}\n\t\n\tfor (int i = 0; i < COUNT; ++i)\n\t{\n\t\tmap_int.insert(ft::make_pair(rand(), rand()));\n\t}\n\n\tint sum = 0;\n\tfor (int i = 0; i < 10000; i++)\n\t{\n\t\tint access = rand();\n\t\tsum += map_int[access];\n\t}\n\tstd::cout << \"should be constant with the same seed: \" << sum << std::endl;\n\n\t{\n\t\tft::map<int, int> copy = map_int;\n\t}\n\tMutantStack<char> iterable_stack;\n\tfor (char letter = 'a'; letter <= 'z'; letter++)\n\t\titerable_stack.push(letter);\n\tfor (MutantStack<char>::iterator it = iterable_stack.begin(); it != iterable_stack.end(); it++)\n\t{\n\t\tstd::cout << *it;\n\t}\n\tstd::cout << std::endl;\n\treturn (0);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/srcs/main.cpp b/srcs/main.cpp
--- a/srcs/main.cpp	(revision 08f94c16957fff1ab1fffcfb261156d9327e3332)
+++ b/srcs/main.cpp	(date 1633983418981)
@@ -6,7 +6,7 @@
 /*   By: hcharlsi <marvin@42.fr>                    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2021/10/10 21:09:40 by hcharlsi          #+#    #+#             */
-/*   Updated: 2021/10/10 21:09:42 by hcharlsi         ###   ########.fr       */
+/*   Updated: 2021/10/11 23:16:32 by hcharlsi         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -124,5 +124,8 @@
 		std::cout << *it;
 	}
 	std::cout << std::endl;
+
+
+	std::vector<int>::it
 	return (0);
 }
Index: includes/iterator.hpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   iterator.hpp                                       :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: hcharlsi <marvin@42.fr>                    +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2021/10/10 17:00:44 by hcharlsi          #+#    #+#             */\n/*   Updated: 2021/10/11 21:21:14 by hcharlsi         ###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n\n#ifndef FT_CONTAINERS_ITERATOR_HPP\n#define FT_CONTAINERS_ITERATOR_HPP\n\n#include <iterator>\n#include <memory>\n\nnamespace ft\n{\n//\titerator traits\n\ttemplate<class Iterator>\n\tstruct iterator_traits\n\t{\n\t\ttypedef typename Iterator::difference_type difference_type;\n\t\ttypedef typename Iterator::value_type value_type;\n\t\ttypedef typename Iterator::pointer pointer;\n\t\ttypedef typename Iterator::reference reference;\n\t\ttypedef typename Iterator::iterator_category iterator_category;\n\t};\n\n//\treverse_iterator\n\ttemplate<class Iterator>\n\tclass reverse_iterator: public std::iterator<\n\t        typename ft::iterator_traits<Iterator>::iterator_category,\n\t        typename ft::iterator_traits<Iterator>::value_type,\n\t        typename ft::iterator_traits<Iterator>::difference_type,\n\t        typename ft::iterator_traits<Iterator>::pointer,\n\t        typename ft::iterator_traits<Iterator>::reference,>\n\t{\n\tprotected:\n\t\tIterator current;\n\tpublic:\n//\t\tMember types\n\t\ttypedef Iterator iterator_type;\n\t\ttypedef ft::iterator_traits<Iterator>::iterator_category\n\t\t\titerator_category;\n\t\ttypedef ft::iterator_traits<Iterator>::value_type value_type;\n\t\ttypedef ft::iterator_traits<Iterator>::difference_type difference_type;\n\t\ttypedef ft::iterator_traits<Iterator>::pointer pointer;\n\t\ttypedef ft::iterator_traits<Iterator>::reference reference;\n\n//\t\tConstructors\n\t\treverse_iterator();\n\t\texplicit reverse_iterator(iterator_type x);\n\t\ttemplate<class U>\n\t\treverse_iterator(const reverse_iterator<U>& other);\n\n//\t\tDestructor\n\t\t~reverse_iterator();\n\n//\t\tMember functions\n\t\ttemplate<class U>\n\t\treverse_iterator& operator=(const reverse_iterator<U>& other);\n\t\titerator_type base() const;\n\t\treference operator*() const;\n\t\tpointer operator->() const;\n\t\treference operator[] (difference_type n) const;\n\t\treverse_iterator& operator++();\n\t\treverse_iterator operator++(int);\n\t\treverse_iterator& operator--();\n\t\treverse_iterator operator--(int);\n\t\treverse_iterator operator+(difference_type n) const;\n\t\treverse_iterator operator-(difference_type n) const;\n\t\treverse_iterator operator+=(difference_type n) const;\n\t\treverse_iterator operator-=(difference_type n) const;\n\n//\t\tNon-member functions\n\t};\n}\n\n#endif\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/includes/iterator.hpp b/includes/iterator.hpp
--- a/includes/iterator.hpp	(revision 08f94c16957fff1ab1fffcfb261156d9327e3332)
+++ b/includes/iterator.hpp	(date 1633983418952)
@@ -6,7 +6,7 @@
 /*   By: hcharlsi <marvin@42.fr>                    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2021/10/10 17:00:44 by hcharlsi          #+#    #+#             */
-/*   Updated: 2021/10/11 21:21:14 by hcharlsi         ###   ########.fr       */
+/*   Updated: 2021/10/11 23:16:32 by hcharlsi         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,11 +14,9 @@
 #define FT_CONTAINERS_ITERATOR_HPP
 
 #include <iterator>
-#include <memory>
 
 namespace ft
 {
-//	iterator traits
 	template<class Iterator>
 	struct iterator_traits
 	{
@@ -29,7 +27,6 @@
 		typedef typename Iterator::iterator_category iterator_category;
 	};
 
-//	reverse_iterator
 	template<class Iterator>
 	class reverse_iterator: public std::iterator<
 	        typename ft::iterator_traits<Iterator>::iterator_category,
@@ -41,7 +38,6 @@
 	protected:
 		Iterator current;
 	public:
-//		Member types
 		typedef Iterator iterator_type;
 		typedef ft::iterator_traits<Iterator>::iterator_category
 			iterator_category;
@@ -59,23 +55,7 @@
 //		Destructor
 		~reverse_iterator();
 
-//		Member functions
-		template<class U>
-		reverse_iterator& operator=(const reverse_iterator<U>& other);
-		iterator_type base() const;
-		reference operator*() const;
-		pointer operator->() const;
-		reference operator[] (difference_type n) const;
-		reverse_iterator& operator++();
-		reverse_iterator operator++(int);
-		reverse_iterator& operator--();
-		reverse_iterator operator--(int);
-		reverse_iterator operator+(difference_type n) const;
-		reverse_iterator operator-(difference_type n) const;
-		reverse_iterator operator+=(difference_type n) const;
-		reverse_iterator operator-=(difference_type n) const;
 
-//		Non-member functions
 	};
 }
 
